{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"reference/src/","title":"src","text":""},{"location":"reference/src/#src","title":"src","text":"<p>Modules:</p> <ul> <li> <code>algorithms</code>           \u2013            </li> <li> <code>factory</code>           \u2013            <p>This module contains the factory functions for the graph traversal algorithms</p> </li> <li> <code>map</code>           \u2013            </li> </ul>"},{"location":"reference/src/algorithms/","title":"algorithms","text":""},{"location":"reference/src/algorithms/#src.algorithms","title":"src.algorithms","text":"<p>Modules:</p> <ul> <li> <code>heuristics</code>           \u2013            </li> <li> <code>pathfinder</code>           \u2013            </li> <li> <code>search_utils</code>           \u2013            </li> <li> <code>uninformed_search</code>           \u2013            <p>Contains the uninformed search algorithms.</p> </li> </ul>"},{"location":"reference/src/algorithms/a_star/","title":"a_star","text":""},{"location":"reference/src/algorithms/a_star/#src.algorithms.a_star","title":"src.algorithms.a_star","text":""},{"location":"reference/src/algorithms/heuristics/","title":"heuristics","text":""},{"location":"reference/src/algorithms/heuristics/#src.algorithms.heuristics","title":"src.algorithms.heuristics","text":"<p>Functions:</p> <ul> <li> <code>euclidean_distance</code>             \u2013              <p>Calculates the Euclidean distance.</p> </li> <li> <code>manhattan_distance</code>             \u2013              <p>Calculates the manhattan distance</p> </li> </ul>"},{"location":"reference/src/algorithms/heuristics/#src.algorithms.heuristics.euclidean_distance","title":"euclidean_distance","text":"<pre><code>euclidean_distance(current_pos: Position, goal_pos: Position) -&gt; float\n</code></pre> <p>Calculates the Euclidean distance.</p> <p>Euclidean distance = sqrt((x1 - x2)^2 + (y1 - y2)^2)</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>The heuristic value.</p> </li> </ul> Source code in <code>src/algorithms/heuristics.py</code> <pre><code>def euclidean_distance(current_pos: Position, goal_pos: Position) -&gt; float:\n    \"\"\"\n    Calculates the Euclidean distance.\n\n    Euclidean distance = sqrt((x1 - x2)^2 + (y1 - y2)^2)\n\n    Args:\n        current_pos (Position): The current position.\n        goal_pos (Position): The goal position.\n\n    Returns:\n        float: The heuristic value.\n    \"\"\"\n    x_distance = (current_pos.x - goal_pos.x) ** 2\n    y_distance = (current_pos.y - goal_pos.y) ** 2\n    return sqrt(x_distance + y_distance)\n</code></pre>"},{"location":"reference/src/algorithms/heuristics/#src.algorithms.heuristics.euclidean_distance(current_pos)","title":"<code>current_pos</code>","text":"(<code>Position</code>)           \u2013            <p>The current position.</p>"},{"location":"reference/src/algorithms/heuristics/#src.algorithms.heuristics.euclidean_distance(goal_pos)","title":"<code>goal_pos</code>","text":"(<code>Position</code>)           \u2013            <p>The goal position.</p>"},{"location":"reference/src/algorithms/heuristics/#src.algorithms.heuristics.manhattan_distance","title":"manhattan_distance","text":"<pre><code>manhattan_distance(current_pos: Position, goal_pos: Position) -&gt; float\n</code></pre> <p>Calculates the manhattan distance</p> <p>Manhatten distance = |x1 - x2| + |y1 - y2|</p> <p>Args:      current_pos (Position): The current position      goal_pos (Position): The goal position  Returns:      float: The heuristic value</p> Source code in <code>src/algorithms/heuristics.py</code> <pre><code>def manhattan_distance(current_pos: Position, goal_pos: Position) -&gt; float:\n    \"\"\"\n    Calculates the manhattan distance\n\n    Manhatten distance = |x1 - x2| + |y1 - y2|\n\n     Args:\n         current_pos (Position): The current position\n         goal_pos (Position): The goal position\n     Returns:\n         float: The heuristic value\n    \"\"\"\n    x_distance = abs(current_pos.x - goal_pos.x)\n    y_distance = abs(current_pos.y - goal_pos.y)\n    return x_distance + y_distance\n</code></pre>"},{"location":"reference/src/algorithms/path_service/","title":"path_service","text":""},{"location":"reference/src/algorithms/path_service/#src.algorithms.path_service","title":"src.algorithms.path_service","text":""},{"location":"reference/src/algorithms/pathfinder/","title":"pathfinder","text":""},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder","title":"src.algorithms.pathfinder","text":"<p>Classes:</p> <ul> <li> <code>Pathfinder</code>           \u2013            <p>A interface for pathfinding algorithms.</p> </li> </ul>"},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder.Pathfinder","title":"Pathfinder","text":"<p>               Bases: <code>ABC</code></p> <p>A interface for pathfinding algorithms. Follows the Strategy design pattern. Read more here: https://en.wikipedia.org/wiki/Strategy_pattern</p> <p>Methods:</p> <ul> <li> <code>find_path</code>             \u2013              <p>Find a path from start_pos to goal_pos on the map using the algorithm</p> </li> </ul>"},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder.Pathfinder.find_path","title":"find_path  <code>abstractmethod</code>","text":"<pre><code>find_path(map: Map, start: Node, goal: Node, heuristic: Callable) -&gt; tuple[list[Position], list[Node]]\n</code></pre> <p>Find a path from start_pos to goal_pos on the map using the algorithm It will use the heuristic if it is provided and the algorithm supports it.</p> <p>Parameters:</p> <p>Returns:     - The path from the start to the goal node or None if no path exists     - The order in which the nodes were visited</p> Source code in <code>src/algorithms/pathfinder.py</code> <pre><code>@abstractmethod\ndef find_path(\n    self,\n    map: Map,\n    start: Node,\n    goal: Node,\n    heuristic: Callable,\n) -&gt; tuple[list[Position], list[Node]]:\n    \"\"\"\n    Find a path from start_pos to goal_pos on the map using the algorithm\n    It will use the heuristic if it is provided and the algorithm supports it.\n\n    Args:\n        map (Map): The map on which the algorithm is run\n        start_pos (Position): The start position\n        goal_pos (Position): The goal position\n        heuristic (Callable): The heuristic function to use\n    Returns:\n        - The path from the start to the goal node or None if no path exists\n        - The order in which the nodes were visited\n    \"\"\"\n    pass\n</code></pre>"},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder.Pathfinder.find_path(map)","title":"<code>map</code>","text":"(<code>Map</code>)           \u2013            <p>The map on which the algorithm is run</p>"},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder.Pathfinder.find_path(start_pos)","title":"<code>start_pos</code>","text":"(<code>Position</code>)           \u2013            <p>The start position</p>"},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder.Pathfinder.find_path(goal_pos)","title":"<code>goal_pos</code>","text":"(<code>Position</code>)           \u2013            <p>The goal position</p>"},{"location":"reference/src/algorithms/pathfinder/#src.algorithms.pathfinder.Pathfinder.find_path(heuristic)","title":"<code>heuristic</code>","text":"(<code>Callable</code>)           \u2013            <p>The heuristic function to use</p>"},{"location":"reference/src/algorithms/search_utils/","title":"search_utils","text":""},{"location":"reference/src/algorithms/search_utils/#src.algorithms.search_utils","title":"src.algorithms.search_utils","text":"<p>Functions:</p> <ul> <li> <code>reconstruct_path</code>             \u2013              <p>Reconstructs the path from the start to the goal node</p> </li> </ul>"},{"location":"reference/src/algorithms/search_utils/#src.algorithms.search_utils.reconstruct_path","title":"reconstruct_path","text":"<pre><code>reconstruct_path(came_from: dict, current: Position) -&gt; list[Position]\n</code></pre> <p>Reconstructs the path from the start to the goal node</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>list[Position]</code>           \u2013            <p>list[Position]</p> </li> <li> <code>list[Position]</code>           \u2013            <p>The path from the start to the goal node</p> </li> </ul> Source code in <code>src/algorithms/search_utils.py</code> <pre><code>def reconstruct_path(came_from: dict, current: Position) -&gt; list[Position]:\n    \"\"\"\n    Reconstructs the path from the start to the goal node\n\n    Args:\n        came_from (dict):  Dictionary with the path from the start to the goal node\n        current (Position): The goal node\n\n    Returns:\n        list[Position]\n        The path from the start to the goal node\n    \"\"\"\n    print(\"[INFO] Reconstructing path...\")\n    print(f\"came_from: {came_from}\")\n    total_path = [current]\n    while current in came_from.keys():\n        # Stop if there is a cycle in the path\n        if current == came_from[current]:\n            break\n        current = came_from[current]\n        total_path.append(current)\n    total_path.reverse()\n    return total_path\n</code></pre>"},{"location":"reference/src/algorithms/search_utils/#src.algorithms.search_utils.reconstruct_path(came_from)","title":"<code>came_from</code>","text":"(<code>dict</code>)           \u2013            <p>Dictionary with the path from the start to the goal node</p>"},{"location":"reference/src/algorithms/search_utils/#src.algorithms.search_utils.reconstruct_path(current)","title":"<code>current</code>","text":"(<code>Position</code>)           \u2013            <p>The goal node</p>"},{"location":"reference/src/algorithms/uninformed_search/","title":"uninformed_search","text":""},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search","title":"src.algorithms.uninformed_search","text":"<p>Contains the uninformed search algorithms.</p> <p>Classes:</p> <ul> <li> <code>QueueFrontier</code>           \u2013            <p>The frontier is a priority queue of nodes. The nodes are sorted by it cost.</p> </li> <li> <code>StackFrontier</code>           \u2013            <p>The frontier is a stack.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>BFS</code>             \u2013              <p>Breadth first search</p> </li> <li> <code>DFS</code>             \u2013              <p>Depth first search</p> </li> </ul>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.QueueFrontier","title":"QueueFrontier","text":"<pre><code>QueueFrontier(start_pos)\n</code></pre> <p>The frontier is a priority queue of nodes. The nodes are sorted by it cost.</p> <p>Instantiate a frontier object.</p> <p>Methods:</p> <ul> <li> <code>append</code>             \u2013              <p>Inserts a node into the frontier. The node is inserted in the</p> </li> <li> <code>contains</code>             \u2013              <p>Getter for the frontier</p> </li> <li> <code>is_empty</code>             \u2013              <p>Checks if the frontier is empty</p> </li> <li> <code>pop</code>             \u2013              <p>Finds the node with the lowest cost in the frontier and returns it.</p> </li> </ul> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def __init__(self, start_pos):\n    \"\"\"Instantiate a frontier object.\"\"\"\n    self.frontier = [start_pos]\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.QueueFrontier.append","title":"append","text":"<pre><code>append(position)\n</code></pre> <p>Inserts a node into the frontier. The node is inserted in the correct position based on its cost and distance towards the goal. Args:     position (Position): The position of the node     cost (float, optional): The cost to reach the node. Defaults to 0.</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def append(self, position):\n    \"\"\"\n    Inserts a node into the frontier. The node is inserted in the\n    correct position based on its cost and distance towards the goal.\n    Args:\n        position (Position): The position of the node\n        cost (float, optional): The cost to reach the node. Defaults to 0.\n    \"\"\"\n    self.frontier.append(position)\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.QueueFrontier.contains","title":"contains","text":"<pre><code>contains(object) -&gt; bool\n</code></pre> <p>Getter for the frontier</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def contains(self, object) -&gt; bool:\n    \"\"\"Getter for the frontier\"\"\"\n    return object in self.frontier\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.QueueFrontier.is_empty","title":"is_empty","text":"<pre><code>is_empty()\n</code></pre> <p>Checks if the frontier is empty</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def is_empty(self):\n    \"\"\"Checks if the frontier is empty\"\"\"\n    return len(self.frontier) == 0\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.QueueFrontier.pop","title":"pop","text":"<pre><code>pop()\n</code></pre> <p>Finds the node with the lowest cost in the frontier and returns it. As the frontier is sorted, the node with the lowest cost is the last</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def pop(self):\n    \"\"\"\n    Finds the node with the lowest cost in the frontier and returns it.\n    As the frontier is sorted, the node with the lowest cost is the last\n    \"\"\"\n    return self.frontier.pop(0)\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.StackFrontier","title":"StackFrontier","text":"<pre><code>StackFrontier(start_pos)\n</code></pre> <p>The frontier is a stack.</p> <p>Instantiate a frontier object.</p> <p>Methods:</p> <ul> <li> <code>contains</code>             \u2013              <p>Getter for the frontier</p> </li> <li> <code>get_frontier</code>             \u2013              <p>Getter for the frontier</p> </li> <li> <code>is_empty</code>             \u2013              <p>Checks if the frontier is empty</p> </li> </ul> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def __init__(self, start_pos):\n    \"\"\"Instantiate a frontier object.\"\"\"\n    self.frontier = [start_pos]\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.StackFrontier.contains","title":"contains","text":"<pre><code>contains(object) -&gt; bool\n</code></pre> <p>Getter for the frontier</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def contains(self, object) -&gt; bool:\n    \"\"\"Getter for the frontier\"\"\"\n    return object in self.frontier\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.StackFrontier.get_frontier","title":"get_frontier","text":"<pre><code>get_frontier() -&gt; Position\n</code></pre> <p>Getter for the frontier</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def get_frontier(self) -&gt; Position:\n    \"\"\"Getter for the frontier\"\"\"\n    return self.frontier\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.StackFrontier.is_empty","title":"is_empty","text":"<pre><code>is_empty()\n</code></pre> <p>Checks if the frontier is empty</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def is_empty(self):\n    \"\"\"Checks if the frontier is empty\"\"\"\n    return len(self.frontier) == 0\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.BFS","title":"BFS","text":"<pre><code>BFS(map: Map, start: Node, goal: Node) -&gt; tuple[list[Position], list[Node]]\n</code></pre> <p>Breadth first search</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def BFS(map: Map, start: Node, goal: Node) -&gt; tuple[list[Position], list[Node]]:\n    \"\"\"Breadth first search\"\"\"\n    return _search(map, start, goal, QueueFrontier)\n</code></pre>"},{"location":"reference/src/algorithms/uninformed_search/#src.algorithms.uninformed_search.DFS","title":"DFS","text":"<pre><code>DFS(map: Map, start: Node, goal: Node) -&gt; tuple[list[Position], list[Node]]\n</code></pre> <p>Depth first search</p> Source code in <code>src/algorithms/uninformed_search.py</code> <pre><code>def DFS(map: Map, start: Node, goal: Node) -&gt; tuple[list[Position], list[Node]]:\n    \"\"\"Depth first search\"\"\"\n    return _search(map, start, goal, StackFrontier)\n</code></pre>"},{"location":"reference/src/factory/","title":"factory","text":""},{"location":"reference/src/factory/#src.factory","title":"src.factory","text":"<p>This module contains the factory functions for the graph traversal algorithms</p> <p>Functions:</p> <ul> <li> <code>get_graph_traversal_methods</code>             \u2013              <p>This function returns a list of all available graph traversal methods</p> </li> <li> <code>get_heuristic_function</code>             \u2013              <p>This function returns the heuristic function for the given heuristic name</p> </li> <li> <code>get_heuristics</code>             \u2013              <p>This function returns a list of heuristics that are valid for the given graph method name</p> </li> <li> <code>get_pathfinder</code>             \u2013              <p>This function returns the pathfinder for the given graph method name</p> </li> </ul>"},{"location":"reference/src/factory/#src.factory.get_graph_traversal_methods","title":"get_graph_traversal_methods","text":"<pre><code>get_graph_traversal_methods() -&gt; list[str]\n</code></pre> <p>This function returns a list of all available graph traversal methods</p> Source code in <code>src/factory.py</code> <pre><code>def get_graph_traversal_methods() -&gt; list[str]:\n    \"\"\"\n    This function returns a list of all available graph traversal methods\n    \"\"\"\n    return list(graph_traversal_function_map.keys())\n</code></pre>"},{"location":"reference/src/factory/#src.factory.get_heuristic_function","title":"get_heuristic_function","text":"<pre><code>get_heuristic_function(heuristic_name: str) -&gt; Callable\n</code></pre> <p>This function returns the heuristic function for the given heuristic name</p> Source code in <code>src/factory.py</code> <pre><code>def get_heuristic_function(heuristic_name: str) -&gt; Callable:\n    \"\"\"\n    This function returns the heuristic function for the given heuristic name\n    \"\"\"\n    match heuristic_name.lower():\n        case \"manhattan\":\n            return manhattan_distance\n        case \"euclidean\":\n            return euclidean_distance\n        case _:\n            raise ValueError(f\"Invalid heuristic name: {heuristic_name}\")\n</code></pre>"},{"location":"reference/src/factory/#src.factory.get_heuristics","title":"get_heuristics","text":"<pre><code>get_heuristics(graph_method_name: str) -&gt; list[str]\n</code></pre> <p>This function returns a list of heuristics that are valid for the given graph method name</p> Source code in <code>src/factory.py</code> <pre><code>def get_heuristics(graph_method_name: str) -&gt; list[str]:\n    \"\"\"\n    This function returns a list of heuristics that are valid for the given graph method name\n    \"\"\"\n    match graph_method_name.lower():\n        case \"a* (a star)\":\n            return [\"Manhattan\", \"Euclidean\"]\n        case \"breadth first search (bfs)\":\n            return []\n        case \"depth first search (dfs)\":\n            return []\n        case _:\n            raise ValueError(f\"Invalid graph method name: {graph_method_name}\")\n</code></pre>"},{"location":"reference/src/factory/#src.factory.get_pathfinder","title":"get_pathfinder","text":"<pre><code>get_pathfinder(graph_method_name: str) -&gt; Pathfinder\n</code></pre> <p>This function returns the pathfinder for the given graph method name</p> Source code in <code>src/factory.py</code> <pre><code>def get_pathfinder(graph_method_name: str) -&gt; Pathfinder:\n    \"\"\"\n    This function returns the pathfinder for the given graph method name\n    \"\"\"\n    return graph_traversal_function_map[graph_method_name]\n</code></pre>"},{"location":"reference/src/map/","title":"map","text":""},{"location":"reference/src/map/#src.map","title":"src.map","text":"<p>Classes:</p> <ul> <li> <code>Map</code>           \u2013            <p>A interface for the map with only the methods needed for the A* algorithm.</p> </li> <li> <code>Node</code>           \u2013            <p>A node in the search tree. Contains the position and the cost to reach it.</p> </li> <li> <code>Position</code>           \u2013            <p>A position in the graph. Contains the x and y coordinates.</p> </li> <li> <code>RestMap</code>           \u2013            <p>A map made from the REST API</p> </li> </ul>"},{"location":"reference/src/map/#src.map.Map","title":"Map","text":"<p>               Bases: <code>ABC</code></p> <p>A interface for the map with only the methods needed for the A* algorithm.</p> <p>Methods:</p> <ul> <li> <code>get_cell_value</code>             \u2013              <p>Getter for the value (cost) of the cell at <code>pos</code></p> </li> <li> <code>get_neighbors</code>             \u2013              <p>Find all legal neighbors of a position</p> </li> </ul>"},{"location":"reference/src/map/#src.map.Map.get_cell_value","title":"get_cell_value  <code>abstractmethod</code>","text":"<pre><code>get_cell_value(position: Position) -&gt; int\n</code></pre> <p>Getter for the value (cost) of the cell at <code>pos</code></p> Source code in <code>src/map.py</code> <pre><code>@abstractmethod\ndef get_cell_value(self, position: Position) -&gt; int:\n    \"\"\"Getter for the value (cost) of the cell at `pos`\"\"\"\n    pass\n</code></pre>"},{"location":"reference/src/map/#src.map.Map.get_neighbors","title":"get_neighbors  <code>abstractmethod</code>","text":"<pre><code>get_neighbors(position: Position) -&gt; list[Position]\n</code></pre> <p>Find all legal neighbors of a position</p> Source code in <code>src/map.py</code> <pre><code>@abstractmethod\ndef get_neighbors(self, position: Position) -&gt; list[Position]:\n    \"\"\"Find all legal neighbors of a position\"\"\"\n    pass\n</code></pre>"},{"location":"reference/src/map/#src.map.Node","title":"Node  <code>dataclass</code>","text":"<pre><code>Node(position: Position, weight: int)\n</code></pre> <p>A node in the search tree. Contains the position and the cost to reach it.</p>"},{"location":"reference/src/map/#src.map.Position","title":"Position  <code>dataclass</code>","text":"<pre><code>Position(x: int, y: int)\n</code></pre> <p>A position in the graph. Contains the x and y coordinates.</p>"},{"location":"reference/src/map/#src.map.RestMap","title":"RestMap  <code>dataclass</code>","text":"<pre><code>RestMap(map: list[Node], start_pos: Node, goal_pos: Node)\n</code></pre> <p>               Bases: <code>Map</code></p> <p>A map made from the REST API</p> <p>Methods:</p> <ul> <li> <code>get_cell_value</code>             \u2013              <p>Getter for the value (weight) of the cell at <code>pos</code></p> </li> <li> <code>get_neighbors</code>             \u2013              <p>Find all legal neighbors of a position</p> </li> </ul>"},{"location":"reference/src/map/#src.map.RestMap.get_cell_value","title":"get_cell_value","text":"<pre><code>get_cell_value(position: Position) -&gt; int\n</code></pre> <p>Getter for the value (weight) of the cell at <code>pos</code></p> Source code in <code>src/map.py</code> <pre><code>def get_cell_value(self, position: Position) -&gt; int:\n    \"\"\"Getter for the value (weight) of the cell at `pos`\"\"\"\n    if position in self._value_cache:\n        return self._value_cache[position]\n\n    for n in self.map:\n        if n.position == position:\n            node = n\n            break\n    return node.weight\n</code></pre>"},{"location":"reference/src/map/#src.map.RestMap.get_neighbors","title":"get_neighbors","text":"<pre><code>get_neighbors(position: Position) -&gt; list[Position]\n</code></pre> <p>Find all legal neighbors of a position</p> Source code in <code>src/map.py</code> <pre><code>def get_neighbors(self, position: Position) -&gt; list[Position]:\n    \"\"\"Find all legal neighbors of a position\"\"\"\n    if position in self._neighbor_cache:\n        return self._neighbor_cache[position]\n\n    neighbors = []\n    for node in self.map:\n        if node.position.x == position.x and node.position.y == position.y:\n            continue\n        if node.weight == self.SENTINEL_VALUE:\n            continue\n        if (\n            abs(node.position.x - position.x) &lt;= 1\n            and abs(node.position.y - position.y) &lt;= 1\n            and (\n                abs(node.position.x - position.x)\n                + abs(node.position.y - position.y)\n                == 1\n            )\n        ):\n            neighbors.append(node.position)\n    return neighbors\n</code></pre>"},{"location":"reference/src/models/","title":"models","text":""},{"location":"reference/src/models/#src.models","title":"src.models","text":""}]}